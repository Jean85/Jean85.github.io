<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on Alessandro Lai</title>
    <link>https://alessandrolai.dev/tags/php/</link>
    <description>Recent content in PHP on Alessandro Lai</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Sep 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://alessandrolai.dev/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to gradually upgrade toward PHPUnit 6 with namespaced classes</title>
      <link>https://alessandrolai.dev/posts/phpunit-upgrade-namespace/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://alessandrolai.dev/posts/phpunit-upgrade-namespace/</guid>
      <description>&lt;p&gt;In the latest months I wrote multiple times, in different projects, code migrating &lt;strong&gt;PHPUnit&lt;/strong&gt; toward major &lt;strong&gt;version 6&lt;/strong&gt;. This upgrade is harder than the previous one, since in this version it was introduced a big breaking change: &lt;strong&gt;all classes got (finally!) namespaced&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This means that any usage of those classes in your project needs to be updated. It may seem a simple find &amp;amp; replace job, but since you need to introduce at least one &lt;code&gt;use PHPUnit\Framework\TestCase&lt;/code&gt; line at the top of each one of your test classes, it&amp;rsquo;s a boring and a little more than trivial task; also, &lt;strong&gt;upgrading it in a single big jump may not be feasible or prudent&lt;/strong&gt;, especially in the case of open source or distributed libraries, where backward compatibility and support for old PHP versions must be ensured.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why type hints and interfaces are not visual debt</title>
      <link>https://alessandrolai.dev/posts/visual-debt-typehints/</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      <guid>https://alessandrolai.dev/posts/visual-debt-typehints/</guid>
      <description>&lt;p&gt;A few days ago I stumbled on a strange tweet that was highlighting a controversy about scalar type hints.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Scalar type hints &amp;amp; return types vs no scalar type hints &amp;amp; return types is #PHP&#39;s new spaces vs tabs&lt;/p&gt;&#xA;&lt;p&gt;â€” Cees-Jan ðŸ”Š Kiewiet (@WyriHaximus)&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;After asking references about this, someone alluded to this very short video: &lt;a href=&#34;https://laracasts.com/series/php-bits/episodes/1&#34;&gt;&lt;strong&gt;&amp;ldquo;PHP Bits: Visual Debt&amp;rdquo;&lt;/strong&gt;&lt;/a&gt; (it&amp;rsquo;s only 3 minutes, please watch it before continue reading). After that, the author of the video was dragged into the conversation, and it blew up into a big tweetstorm in the following few hours.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How PHP 7 &amp; TDD helped me sleep better</title>
      <link>https://alessandrolai.dev/posts/how-php-7-tdd-helped-me-sleep-better/</link>
      <pubDate>Tue, 07 Jun 2016 00:00:00 +0000</pubDate>
      <guid>https://alessandrolai.dev/posts/how-php-7-tdd-helped-me-sleep-better/</guid>
      <description>&lt;h1 id=&#34;the-enemies-of-programming&#34;&gt;The enemies of programming&lt;/h1&gt;&#xA;&lt;p&gt;As many of you will agree with me, &lt;strong&gt;sleep deprivation&lt;/strong&gt; is the enemy of programming.&lt;br&gt;&#xA;Maybe we fear only one thing more than that: &lt;strong&gt;being interrupted&lt;/strong&gt;.&#xA;&lt;a href=&#34;http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/&#34;&gt;&lt;img src=&#34;https://alessandrolai.dev/images/how-php-7-tdd-helped-me-sleep-better/interruption.png&#34; alt=&#34;Why you shouldn&amp;rsquo;t interrupt a programmer (by Jason Heeris)&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;While writing code we have to think really hard, we use complex abstractions, we go through long business workflows and so on&amp;hellip; fatigue and interruptions are the main enemies of those in this line of work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Paraunit: test paralleli, Doctrine e le fixture</title>
      <link>https://alessandrolai.dev/posts/paraunit/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://alessandrolai.dev/posts/paraunit/</guid>
      <description>&lt;p&gt;&lt;em&gt;Questo articolo Ã¨ la sintesi di un talk presentato al &lt;a href=&#34;http://2015.symfonyday.it/&#34;&gt;SymfonyDay 2015&lt;/a&gt;; potete trovare le slide &lt;a href=&#34;http://jean85.github.io/slides/2015-10-paraunit-symfonyday/index.html&#34;&gt;qui&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;i-test-e-la-loro-durata&#34;&gt;I test e la loro durata&lt;/h4&gt;&#xA;&lt;p&gt;Sviluppare applicazioni scrivendo &lt;strong&gt;test&lt;/strong&gt; e facendo &lt;a href=&#34;https://it.wikipedia.org/wiki/Test_driven_development&#34;&gt;Test Driven Development&lt;/a&gt; Ã¨ un&amp;rsquo;ottima pratica, e dÃ  parecchie soddisfazioni. Con l&amp;rsquo;andare del tempo, si fa &lt;strong&gt;crescere la suite di test&lt;/strong&gt; del proprio progetto, cercando di aumentarne la copertura e l&amp;rsquo;efficacia e si scrivono nuovi test corrispondenti alle nuove funzionalitÃ  che vengono man mano sviluppate.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
